interface PlantEvent {
  id: string;
  plantId: string;
  type: 'watering' | 'harvesting' | 'pruning' | 'fertilizing' | 'issue' | 'note';
  timestamp: string;
  description: string;
}

interface PlantEventLogProps {
  events: PlantEvent[];
  onAddEvent: (event: Omit<PlantEvent, 'id'>) => void;
}

const EVENT_ICONS = {
  watering: 'üíß',
  harvesting: 'üåæ',
  pruning: '‚úÇÔ∏è',
  fertilizing: 'üß™',
  issue: '‚ö†Ô∏è',
  note: 'üìù'
} as const;

const EVENT_LABELS = {
  watering: '–ü–æ–ª–∏–≤',
  harvesting: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è',
  pruning: '–û–±—Ä–µ–∑–∫–∞',
  fertilizing: '–ü–æ–¥–∫–æ—Ä–º–∫–∞',
  issue: '–ü—Ä–æ–±–ª–µ–º–∞',
  note: '–ó–∞–º–µ—Ç–∫–∞'
} as const;

export function PlantEventLog({ events, onAddEvent }: PlantEventLogProps) {
  const [isAddingEvent, setIsAddingEvent] = useState(false);
  const [newEvent, setNewEvent] = useState({
    type: 'note' as PlantEvent['type'],
    description: ''
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onAddEvent({
      ...newEvent,
      plantId: events[0]?.plantId || '',
      timestamp: new Date().toISOString()
    });
    setIsAddingEvent(false);
    setNewEvent({ type: 'note', description: '' });
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="font-medium">–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π</h3>
        <button
          onClick={() => setIsAddingEvent(!isAddingEvent)}
          className="flex items-center text-sm text-indigo-600 hover:text-indigo-700"
        >
          + –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
        </button>
      </div>

      {/* Rest of the component remains the same, just using emoji icons */}
    </div>
  );
}